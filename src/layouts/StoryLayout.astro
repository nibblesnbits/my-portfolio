---
import "../styles/global.css";

interface Props {
  title?: string;
  description?: string;
  image?: string;
}

const {
  title = "Juno Threadborne - Author",
  description = "Bending reality for sport",
  image = "/badge.webp",
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <script type="text/javascript">
      (function (c, l, a, r, i, t, y) {
        c[a] =
          c[a] ||
          function () {
            (c[a].q = c[a].q || []).push(arguments);
          };
        t = l.createElement(r);
        t.async = 1;
        t.src = "https://www.clarity.ms/tag/" + i;
        y = l.getElementsByTagName(r)[0];
        y.parentNode.insertBefore(t, y);
      })(window, document, "clarity", "script", "rf3xb48jg8");
    </script>

    <!-- Google Tag Manager -->
    <script>
      (function (w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != "dataLayer" ? "&l=" + l : "";
        j.async = true;
        j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, "script", "dataLayer", "GTM-NT2B4SN4");
    </script>
    <!-- End Google Tag Manager -->
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <meta name="robots" content="index,follow" />
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- SEO Meta -->
    <meta name="author" content="Juno Threadborne" />
    <meta
      name="keywords"
      content="Juno Threadborne, speculative fiction, narrative technology, AI writing, digital storytelling, absurdist sci-fi"
    />
    <meta name="theme-color" content="#0f172a" />

    <!-- Open Graph (for LinkedIn, Facebook, etc.) -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content=`Juno Threadborne — ${title}` />
    <meta
      property="og:description"
      content="Explore the speculative and absurdist worlds of Juno Threadborne — where metaphor meets memory and the machine learns to feel."
    />
    <meta property="og:url" content="https://junothreadborne.me/" />
    <meta property="og:image" content={image} />
    <meta property="og:site_name" content="Juno Threadborne" />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content=`Juno Threadborne — ${title}` />
    <meta
      name="twitter:description"
      content="Poetic tech. Thoughtful code. Worlds made of wonder and wire. Come see what Juno’s building."
    />
    <meta name="twitter:image" content={image} />
    <meta name="twitter:creator" content="@junothreadborne" />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
  </head>

  <body
    class="min-h-screen bg-background font-sans antialiased selection:bg-purple-500/20 selection:text-purple-500"
  >
    <!-- Google Tag Manager (noscript) -->
    <noscript
      ><iframe
        src="https://www.googletagmanager.com/ns.html?id=GTM-NT2B4SN4"
        height="0"
        width="0"
        style="display:none;visibility:hidden"></iframe></noscript
    >
    <!-- End Google Tag Manager (noscript) -->
    <div
      class="fixed inset-0 -z-10 h-full w-full bg-background bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))]"
    >
    </div>
    <slot />
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>

<style>
  html,
  body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    scroll-behavior: smooth;
  }

  :root {
    --transition-standard: 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  body {
    transition:
      background-color var(--transition-standard),
      color var(--transition-standard);
  }
</style>

<script>
  // Only track story starts on actual story pages
  const isStoryPage =
    window.location.pathname.includes("/story") ||
    // Add other story path patterns
    document.querySelector(".book-container");

  if (isStoryPage) {
    // Track story starts
    dataLayer.push({
      event: "story_start",
      story_title: document.title,
      referrer: document.referrer,
      event_category: "engagement",
    });

    // Scroll depth tracking
    let maxScroll = 0;
    let scrollMilestones = [25, 50, 75, 100];

    function trackScrollDepth() {
      const scrollTop =
        window.pageYOffset || document.documentElement.scrollTop;
      const docHeight =
        document.documentElement.scrollHeight - window.innerHeight;
      const scrollPercent = Math.round((scrollTop / docHeight) * 100);

      if (scrollPercent > maxScroll) {
        maxScroll = scrollPercent;

        // Track milestone achievements
        scrollMilestones.forEach((milestone) => {
          if (
            scrollPercent >= milestone &&
            !window[`milestone_${milestone}_tracked`]
          ) {
            window[`milestone_${milestone}_tracked`] = true;

            dataLayer.push({
              event: "scroll_depth",
              story_title: document.title,
              scroll_depth: milestone,
              event_category: "engagement",
            });
          }
        });
      }
    }

    // Throttled scroll listener
    let scrollTimeout;
    window.addEventListener("scroll", () => {
      if (scrollTimeout) {
        clearTimeout(scrollTimeout);
      }
      scrollTimeout = setTimeout(trackScrollDepth, 100);
    });
  }

  // Track audio plays (if you have audio elements)
  document.addEventListener("DOMContentLoaded", function () {
    const audioElements = document.querySelectorAll("audio");
    audioElements.forEach((audio) => {
      audio.addEventListener("play", function () {
        dataLayer.push({
          event: "audio_play",
          story_title: document.title,
          audio_chapter: this.closest("h1")?.textContent || "unknown",
          event_category: "engagement",
        });
      });
    });
  });
</script>
